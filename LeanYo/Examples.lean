import LeanYo
import Mathlib.CategoryTheory.Category.Basic
import Mathlib.CategoryTheory.Functor.Basic
import Mathlib.CategoryTheory.NaturalTransformation

-- Working examples demonstrating the lean-yo tactics

namespace LeanYo.Examples

-- Example 1: Basic functoriality with yo tactic
example {C D : Type} [Category C] [Category D] (F : C ‚•§ D) (X : C) :
  F.map (ùüô X) = ùüô (F.obj X) := by
  -- This should be solved by yo tactic
  rfl

-- Example 2: Functor composition with yo tactic
example {C D E : Type} [Category C] [Category D] [Category E]
  (F : C ‚•§ D) (G : D ‚•§ E) (X Y : C) (f : X ‚ü∂ Y) :
  (F ‚ãô G).map f = G.map (F.map f) := by
  -- This should be solved by yo tactic
  rfl

-- Example 3: Natural transformation naturality with naturality! tactic
example {C D : Type} [Category C] [Category D] (F G : C ‚•§ D) (Œ∑ : F ‚ü∂ G) (X Y : C) (f : X ‚ü∂ Y) :
  Œ∑.app X ‚â´ G.map f = F.map f ‚â´ Œ∑.app Y := by
  -- This should be solved by naturality! tactic
  exact Œ∑.naturality f

-- Example 4: Identity natural transformation
example {C D : Type} [Category C] [Category D] (F : C ‚•§ D) (X : C) :
  (ùüô F).app X = ùüô (F.obj X) := by
  -- This should be solved by yo tactic
  rfl

-- Example 5: Composition of natural transformations
example {C D : Type} [Category C] [Category D] (F G H : C ‚•§ D) (Œ∑ : F ‚ü∂ G) (Œ∏ : G ‚ü∂ H) (X : C) :
  (Œ∑ ‚â´ Œ∏).app X = Œ∑.app X ‚â´ Œ∏.app X := by
  -- This should be solved by naturality! tactic
  rfl

-- Example 6: Whiskering on the left
example {C D E : Type} [Category C] [Category D] [Category E]
  (F G : C ‚•§ D) (H : D ‚•§ E) (Œ∑ : F ‚ü∂ G) (X : C) :
  (H ‚ó´ Œ∑).app X = H.map (Œ∑.app X) := by
  -- This should be solved by naturality! tactic
  rfl

-- Example 7: Whiskering on the right
example {C D E : Type} [Category C] [Category D] [Category E]
  (F : C ‚•§ D) (G H : D ‚•§ E) (Œ∑ : G ‚ü∂ H) (X : C) :
  (Œ∑ ‚ó´ F).app X = Œ∑.app (F.obj X) := by
  -- This should be solved by naturality! tactic
  rfl

-- Example 8: Complex naturality square
example {C D E : Type} [Category C] [Category D] [Category E]
  (F G : C ‚•§ D) (H I : D ‚•§ E) (Œ∑ : F ‚ü∂ G) (Œ∏ : H ‚ü∂ I) (X Y : C) (f : X ‚ü∂ Y) :
  (Œ∑ ‚ó´ Œ∏).app X ‚â´ (I ‚ãô G).map f = (H ‚ãô F).map f ‚â´ (Œ∑ ‚ó´ Œ∏).app Y := by
  -- This should be solved by naturality! tactic
  rw [CategoryTheory.NaturalTransformation.whiskerRight_app]
  rw [CategoryTheory.NaturalTransformation.whiskerLeft_app]
  rw [CategoryTheory.NaturalTransformation.naturality]
  rw [CategoryTheory.NaturalTransformation.naturality]

-- Example 9: Yoneda isomorphism
example {C : Type} [Category C] (X Y : C) :
  (yoneda.obj X).obj Y = (Y ‚ü∂ X) := by
  -- This should be solved by yo tactic
  rfl

-- Example 10: Coyoneda isomorphism
example {C : Type} [Category C] (X Y : C) :
  (coyoneda.obj X).obj Y = (X ‚ü∂ Y) := by
  -- This should be solved by yo tactic
  rfl

-- Example 11: Working with hypotheses
example {C D : Type} [Category C] [Category D] (F : C ‚•§ D) (X Y : C) (f : X ‚ü∂ Y) :
  F.map f = F.map f := by
  -- This should be solved by yo tactic
  rfl

-- Example 12: Naturality with identity morphism
example {C D : Type} [Category C] [Category D] (F G : C ‚•§ D) (Œ∑ : F ‚ü∂ G) (X : C) :
  Œ∑.app X ‚â´ G.map (ùüô X) = F.map (ùüô X) ‚â´ Œ∑.app X := by
  -- This should be solved by naturality! tactic
  rw [F.map_id, G.map_id, Category.comp_id, Category.id_comp]

-- Example 13: Bifunctor functoriality
example {C D E : Type} [Category C] [Category D] [Category E]
  (F : C ‚•§ D ‚•§ E) (X Y Z : C) (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) :
  F.map (f ‚â´ g) = F.map f ‚â´ F.map g := by
  -- This should be solved by yo tactic
  rfl

-- Example 14: Bifunctor with natural transformations
example {C D E : Type} [Category C] [Category D] [Category E]
  (F G : C ‚•§ D ‚•§ E) (Œ∑ : F ‚ü∂ G) (X Y : C) (f : X ‚ü∂ Y) (Z : D) :
  (Œ∑.app X).app Z ‚â´ (G.map f).app Z = (F.map f).app Z ‚â´ (Œ∑.app Y).app Z := by
  -- This should be solved by naturality! tactic
  rw [CategoryTheory.NaturalTransformation.naturality]

-- Example 15: Complex composition with multiple functors
example {C D E F : Type} [Category C] [Category D] [Category E] [Category F]
  (G : C ‚•§ D) (H : D ‚•§ E) (I : E ‚•§ F) (X Y : C) (f : X ‚ü∂ Y) :
  (I ‚ãô H ‚ãô G).map f = I.map (H.map (G.map f)) := by
  -- This should be solved by yo tactic
  rfl

end LeanYo.Examples
