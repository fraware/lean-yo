name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        lean-version: [v4.8.0, v4.9.0]
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Lean ${{ matrix.lean-version }}
      uses: leanprover/lean4-action@v2
      with:
        lean-version: ${{ matrix.lean-version }}
        
    - name: Install dependencies
      run: |
        lake update
        lake build
        
    - name: Run tests
      run: |
        lake test
        
    - name: Run benchmarks
      run: |
        lake build LeanYo.Tests.Benchmarks
        
    - name: Check for performance regressions
      run: |
        # Run performance benchmarks and check against SLAs
        echo "Checking performance SLAs..."
        echo "P50 target: ≤80ms, P95 target: ≤400ms"
        # In a full implementation, this would run actual benchmarks
        # and compare against baseline performance metrics
        
  proof-diff:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Lean
      uses: leanprover/lean4-action@v2
      with:
        lean-version: v4.8.0
        
    - name: Install dependencies
      run: |
        lake update
        lake build
        
    - name: Analyze proof changes
      run: |
        echo "Analyzing proof changes in PR..."
        echo "This would analyze tactic invocations and lines of proof"
        echo "to provide a diff report for the PR"
        
        # In a full implementation, this would:
        # 1. Build the project on both base and head commits
        # 2. Compare tactic usage patterns
        # 3. Generate a report showing:
        #    - Number of yo/naturality! tactic calls
        #    - Lines of proof reduced/added
        #    - Performance impact analysis
        
  quality-gates:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Lean
      uses: leanprover/lean4-action@v2
      with:
        lean-version: v4.8.0
        
    - name: Install dependencies
      run: |
        lake update
        lake build
        
    - name: Run P0 tests (functoriality + simple NT squares)
      run: |
        echo "Running P0 test suite..."
        lake build LeanYo.Tests.P0
        
    - name: Run P1 tests (whiskering, horizontal/vertical composition)
      run: |
        echo "Running P1 test suite..."
        lake build LeanYo.Tests.P1
        
    - name: Run P2 tests (coyoneda reductions, dinaturality)
      run: |
        echo "Running P2 test suite..."
        lake build LeanYo.Tests.P2
        
    - name: Check test determinism
      run: |
        echo "Checking test determinism..."
        # Run tests multiple times to ensure consistency
        lake build LeanYo.Tests.P0
        lake build LeanYo.Tests.P0
        lake build LeanYo.Tests.P0
        
  performance-benchmarks:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Lean
      uses: leanprover/lean4-action@v2
      with:
        lean-version: v4.8.0
        
    - name: Install dependencies
      run: |
        lake update
        lake build
        
    - name: Run performance benchmarks
      run: |
        echo "Running performance benchmarks..."
        echo "Target SLAs:"
        echo "  - P50 ≤ 80ms per call"
        echo "  - P95 ≤ 400ms per call"
        echo "  - Large diagram improvement ≥60% vs baseline"
        
        # In a full implementation, this would run actual benchmarks
        # and store results for comparison
        
    - name: Check SLA compliance
      run: |
        echo "Checking SLA compliance..."
        # This would parse benchmark results and verify:
        # - yo tactic P50 ≤ 80ms
        # - yo tactic P95 ≤ 400ms  
        # - naturality! tactic P50 ≤ 80ms
        # - naturality! tactic P95 ≤ 400ms
        # - Performance improvements meet targets
        
  documentation:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Lean
      uses: leanprover/lean4-action@v2
      with:
        lean-version: v4.8.0
        
    - name: Build documentation
      run: |
        lake build
        # In a full implementation, this would generate:
        # - API documentation
        # - Usage examples
        # - Performance reports
        
    - name: Validate documentation
      run: |
        echo "Validating documentation..."
        # Check that all public APIs are documented
        # Verify examples compile and run
        # Ensure performance claims are backed by benchmarks

  docker:
    runs-on: ubuntu-latest
    needs: [test, quality-gates, performance-benchmarks]
    if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to GitHub Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/fraware/lean-yo
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=v4.8.0,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Test Docker image
      run: |
        docker run --rm ghcr.io/fraware/lean-yo:latest --help
        docker run --rm ghcr.io/fraware/lean-yo:latest --version

  production-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
        
    - name: Setup Lean
      uses: leanprover/lean4-action@v2
      with:
        lean-version: v4.8.0
        
    - name: Install dependencies
      run: |
        lake update
        lake build
        
    - name: Run production test suite
      run: |
        if [ -f "scripts/production_test.py" ]; then
          python3 scripts/production_test.py
        else
          echo "Production test script not found, skipping..."
        fi
        
    - name: Run lemma validation
      run: |
        if [ -f "scripts/validate_lemmas.py" ]; then
          python3 scripts/validate_lemmas.py
        else
          echo "Lemma validation script not found, skipping..."
        fi